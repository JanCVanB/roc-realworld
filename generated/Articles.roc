# Let's pretend this was generated by https://github.com/stuarth/rocky-the-flying-squirrel
# (it wasn't, because part of what this repo is exploring is using prepared statements -
# which is not what Rocky generates as of this writing!)

module [ListArticlesRow, GetArticleBySlugRow, list_articles!, get_article_by_slug!]

import pg.Pg.Client
import pg.Pg.Cmd
import pg.Pg

ListArticlesRow : {
    slug: Str,
    title: Str,
    description: Str,
    created_at: Str,
    updated_at: Str,
    favorited: Bool,
    favorites_count: U64,
    tags: List Str,
    author: {
        username: Str,
        bio: Str,
        image_url: Str,
        following: Bool,
    }
}

list_articles! :
    Pg.Client,
    Pg.Cmd (List ListArticlesRow),
    Str,
    Str,
    Str,
    U64,
    U64
    => Result
        (List ListArticlesRow)
        [
            PgExpectErr err,
            PgErr Pg.Error,
            PgProtoErr _,
            TcpReadErr _,
            TcpUnexpectedEOF,
            TcpWriteErr _,
        ]
list_articles! = |client, cmd, p0, p1, p2, p3, p4|
    client.command!(cmd.bind([Cmd.str p0, Cmd.str p1, Cmd.str p2, Cmd.u64 p3, Cmd.u64 p4]))?
    .map(|row| {
        slug: row.slug,
        title: row.title,
        description: row.description,
        created_at: row.created_at,
        updated_at: row.updated_at,
        favorited: row.favorited,
        favorites_count: row.favorites_count,
        tags: row.comma_separated_tags.split(","),
        author: {
            username: row.author_username,
            bio: row.author_bio,
            image_url: row.author_image_url,
            following: row.author_following,
        },
    })
    .Ok()
